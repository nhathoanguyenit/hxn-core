<div class="container py-5" style="min-height: 100vh">
    <h1 class="text-center mb-4">Encryption â€” RSA & AES</h1>
    <p class="text-center text-secondary mb-5">
        Encrypt and decrypt text using <strong>RSA-OAEP</strong> (asymmetric) and <strong>AES-GCM</strong> (symmetric).
    </p>

    <div class="row g-4">
        <!-- RSA -->
        <div class="col-md-6">
            <div
                class="card text-light shadow-lg p-4"
                style="background: color-mix(in srgb, rgb(var(--bs-primary-rgb)), black 25%)"
            >
                <h4 class="card-title mb-3">RSA-OAEP</h4>

                <div class="d-flex gap-2 mb-3">
                    <button id="rsaGenBtn" class="btn btn-outline-light btn-sm">Generate Keys</button>
                </div>

                <label for="rsaPublicPem" class="form-label small text-light">Public Key (PEM)</label>
                <textarea
                    id="rsaPublicPem"
                    class="form-control custom-input"
                    rows="3"
                    placeholder="Paste or generate public key..."
                ></textarea>

                <label class="form-label small text-light mt-3">Private Key (PEM)</label>
                <textarea
                    id="rsaPrivatePem"
                    class="form-control custom-input"
                    rows="3"
                    placeholder="Paste or generate private key..."
                ></textarea>

                <hr class="border-secondary my-4" />

                <h6 class="text-light">Encrypt (using Public Key)</h6>
                <textarea
                    id="rsaEncryptInput"
                    class="form-control custom-input"
                    rows="2"
                    placeholder="Enter text..."
                ></textarea>
                <button id="rsaEncryptBtn" class="btn btn-outline-light  btn-sm my-2">Encrypt</button>
                <textarea
                    id="rsaEncryptOutput"
                    class="form-control custom-input"
                    rows="3"
                    placeholder="Ciphertext (base64)"
                    readonly
                ></textarea>

                <hr class="border-secondary my-4" />

                <h6 class="text-light">Decrypt (using Private Key)</h6>
                <textarea
                    id="rsaDecryptInput"
                    class="form-control custom-input"
                    rows="3"
                    placeholder="Paste ciphertext..."
                ></textarea>
                <button id="rsaDecryptBtn" class="btn btn-outline-light  btn-sm my-2">Decrypt</button>
                <textarea
                    id="rsaDecryptOutput"
                    class="form-control custom-input"
                    rows="2"
                    placeholder="Decrypted text"
                    readonly
                ></textarea>
            </div>
        </div>

        <!-- AES -->
        <div class="col-md-6">
            <div
                class="card text-light shadow-lg p-4"
                style="background: color-mix(in srgb, rgb(var(--bs-primary-rgb)), black 25%)"
            >
                <h4 class="card-title mb-3">AES-GCM</h4>

                <div class="d-flex gap-2 mb-3">
                    <button id="aesGenBtn" class="btn btn-outline-light btn-sm">Generate Key</button>
                </div>

                <label for="aesKeyBase64" class="form-label small text-light">AES Key (Base64)</label>
                <textarea
                    id="aesKeyBase64"
                    class="form-control custom-input"
                    placeholder="Paste or generate AES key..."
                ></textarea>

                <hr class="border-secondary my-4" />

                <h6 class="text-light">Encrypt</h6>
                <textarea
                    id="aesEncryptInput"
                    class="form-control custom-input"
                    rows="2"
                    placeholder="Enter text..."
                ></textarea>
                <button id="aesEncryptBtn" class="btn btn-outline-light  btn-sm my-2">Encrypt</button>
                <textarea
                    id="aesEncryptOutput"
                    class="form-control custom-input"
                    rows="3"
                    placeholder="Ciphertext (base64)"
                    readonly
                ></textarea>

                <hr class="border-secondary my-4" />

                <h6 class="text-light">Decrypt</h6>
                <textarea
                    id="aesDecryptInput"
                    class="form-control custom-input"
                    rows="3"
                    placeholder="Paste ciphertext..."
                ></textarea>
                <button id="aesDecryptBtn" class="btn btn-outline-light btn-sm my-2">Decrypt</button>
                <textarea
                    id="aesDecryptOutput"
                    class="form-control custom-input"
                    rows="2"
                    placeholder="Decrypted text"
                    readonly
                ></textarea>
            </div>
        </div>
    </div>
</div>

<script>
    const enc = new TextEncoder();
    const dec = new TextDecoder();

    const ab2b64 = (buf) => btoa(String.fromCharCode(...new Uint8Array(buf)));
    const b642ab = (b64) => Uint8Array.from(atob(b64), (c) => c.charCodeAt(0)).buffer;

    // ====== RSA ======
    let rsaPublicKey, rsaPrivateKey;

    async function exportKey(key, type) {
        const fmt = type === "public" ? "spki" : "pkcs8";
        const ab = await crypto.subtle.exportKey(fmt, key);
        const b64 = ab2b64(ab);
        return `-----BEGIN ${type.toUpperCase()} KEY-----\n${b64.match(/.{1,64}/g).join("\n")}\n-----END ${type.toUpperCase()} KEY-----`;
    }

    async function importPublic(pem) {
        const b64 = pem.replace(/-----.*-----/g, "").replace(/\s+/g, "");
        return crypto.subtle.importKey("spki", b642ab(b64), { name: "RSA-OAEP", hash: "SHA-256" }, true, ["encrypt"]);
    }

    async function importPrivate(pem) {
        const b64 = pem.replace(/-----.*-----/g, "").replace(/\s+/g, "");
        return crypto.subtle.importKey("pkcs8", b642ab(b64), { name: "RSA-OAEP", hash: "SHA-256" }, true, ["decrypt"]);
    }

    async function validateRSAKey(el, type) {
        const pem = el.value.trim();
        if (!pem) return;
        try {
            if (type === "public") rsaPublicKey = await importPublic(pem);
            else rsaPrivateKey = await importPrivate(pem);
            el.classList.add("valid");
            el.classList.remove("invalid");
            el.title = "Valid " + type + " key";
        } catch {
            el.classList.remove("valid");
            el.classList.add("invalid");
            el.title = "Invalid " + type + " key";
        }
    }

    document.getElementById("rsaPublicPem").addEventListener("input", (e) => validateRSAKey(e.target, "public"));
    document.getElementById("rsaPrivatePem").addEventListener("input", (e) => validateRSAKey(e.target, "private"));

    document.getElementById("rsaGenBtn").onclick = async () => {
        const pair = await crypto.subtle.generateKey(
            {
                name: "RSA-OAEP",
                modulusLength: 2048,
                publicExponent: new Uint8Array([1, 0, 1]),
                hash: "SHA-256",
            },
            true,
            ["encrypt", "decrypt"]
        );

        rsaPublicKey = pair.publicKey;
        rsaPrivateKey = pair.privateKey;

        document.getElementById("rsaPublicPem").value = await exportKey(rsaPublicKey, "public");
        document.getElementById("rsaPrivatePem").value = await exportKey(rsaPrivateKey, "private");

        document.getElementById("rsaPublicPem").classList.add("valid");
        document.getElementById("rsaPrivatePem").classList.add("valid");
    };

    document.getElementById("rsaEncryptBtn").onclick = async () => {
        try {
            if (!rsaPublicKey) await validateRSAKey(document.getElementById("rsaPublicPem"), "public");
            const text = document.getElementById("rsaEncryptInput").value;
            const encrypted = await crypto.subtle.encrypt({ name: "RSA-OAEP" }, rsaPublicKey, enc.encode(text));
            document.getElementById("rsaEncryptOutput").value = ab2b64(encrypted);
        } catch (err) {
            alert("RSA Encryption failed: " + err.message);
        }
    };

    document.getElementById("rsaDecryptBtn").onclick = async () => {
        try {
            if (!rsaPrivateKey) await validateRSAKey(document.getElementById("rsaPrivatePem"), "private");
            const b64 = document.getElementById("rsaDecryptInput").value.trim();
            const decrypted = await crypto.subtle.decrypt({ name: "RSA-OAEP" }, rsaPrivateKey, b642ab(b64));
            document.getElementById("rsaDecryptOutput").value = dec.decode(decrypted);
        } catch (err) {
            alert("RSA Decryption failed: " + err.message);
        }
    };

    // ====== AES ======
    let aesKey;

    async function importAES(base64) {
        const raw = b642ab(base64);
        return crypto.subtle.importKey("raw", raw, { name: "AES-GCM" }, true, ["encrypt", "decrypt"]);
    }

    async function validateAESKey(el) {
        return;
        //   const val = el.value.trim();
        //   if (!val) return;
        //   try {
        //     aesKey = await importAES(val);
        //     el.classList.add("valid");
        //     el.classList.remove("invalid");
        //     el.title = "Valid AES key";
        //   } catch {
        //     el.classList.remove("valid");
        //     el.classList.add("invalid");
        //     el.title = "Invalid AES key";
        //   }
    }

    document.getElementById("aesKeyBase64").addEventListener("input", (e) => validateAESKey(e.target));

    document.getElementById("aesGenBtn").onclick = async () => {
        aesKey = await crypto.subtle.generateKey({ name: "AES-GCM", length: 256 }, true, ["encrypt", "decrypt"]);
        const raw = await crypto.subtle.exportKey("raw", aesKey);
        document.getElementById("aesKeyBase64").value = ab2b64(raw);
        document.getElementById("aesKeyBase64").classList.add("valid");
    };

    document.getElementById("aesEncryptBtn").onclick = async () => {
        try {
            if (!aesKey) await validateAESKey(document.getElementById("aesKeyBase64"));
            const text = document.getElementById("aesEncryptInput").value;
            const iv = crypto.getRandomValues(new Uint8Array(12));
            const encrypted = await crypto.subtle.encrypt({ name: "AES-GCM", iv }, aesKey, enc.encode(text));
            const combined = new Uint8Array(iv.length + encrypted.byteLength);
            combined.set(iv);
            combined.set(new Uint8Array(encrypted), iv.length);
            document.getElementById("aesEncryptOutput").value = ab2b64(combined.buffer);
        } catch (err) {
            alert("AES Encryption failed: " + err.message);
        }
    };

    document.getElementById("aesDecryptBtn").onclick = async () => {
        try {
            if (!aesKey) await validateAESKey(document.getElementById("aesKeyBase64"));
            const data = new Uint8Array(b642ab(document.getElementById("aesDecryptInput").value.trim()));
            const iv = data.slice(0, 12);
            const cipher = data.slice(12);
            const decrypted = await crypto.subtle.decrypt({ name: "AES-GCM", iv }, aesKey, cipher);
            document.getElementById("aesDecryptOutput").value = dec.decode(decrypted);
        } catch (err) {
            alert("AES Decryption failed: " + err.message);
        }
    };
</script>
